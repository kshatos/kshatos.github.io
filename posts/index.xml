<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Keagan Shatos</title>
    <link>https://kshatos.github.io/posts/</link>
    <description>Recent content in Posts on Keagan Shatos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kshatos.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Image Based Lighting</title>
      <link>https://kshatos.github.io/posts/image_based_lighting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kshatos.github.io/posts/image_based_lighting/</guid>
      <description>RedGreenBlueMetallicRoughnessBrightnessWith the proper framework in place and point lights under our belt, how can we handle more complicated lighting conditions?
Ambient Light Most scene objects are lit largely by ambient light. This is just the light reflected off of the background objects in the scene. The ambient light from a scene can be modeled as a continuum of point lights, infinitely far away.</description>
    </item>
    
    <item>
      <title>Physically Based Rendering</title>
      <link>https://kshatos.github.io/posts/physically_based_rendering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kshatos.github.io/posts/physically_based_rendering/</guid>
      <description>Rendering 3D scenes is an important part of communicating information to the user in many software applications. Basing the rendering algorithm on a physical model of light can produce images that are more realistic, and therefore can provide the user a more intuitive understanding of the 3D scenes (as well as often being more pleasing to the eye). So how does light work, and how can we simulate it in our rendering algorithms?</description>
    </item>
    
    <item>
      <title>Physically Based Rendering Implementation</title>
      <link>https://kshatos.github.io/posts/physically_based_rendering_implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kshatos.github.io/posts/physically_based_rendering_implementation/</guid>
      <description>RedGreenBlueMetallicRoughnessOverview This demo was made using javascript, webGL, and the glMatrix library. It is an implementation of the PBR algorithm outlined in my previous post. The scene consists of a sphere, three point lights, and some ambient lighting. The camera spins around the sphere at a constant speed. Most of the code is boiler plate, so I&amp;rsquo;ll focus mostly on the shader code.</description>
    </item>
    
  </channel>
</rss>
